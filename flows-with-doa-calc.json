[
    {
        "id": "0833c215ec6eaf50",
        "type": "tab",
        "label": "Kraken Flow",
        "disabled": false,
        "info": "HTTP Request = http://KRAKEN_IP:8081/DOA_value.html\nWill broadcast via ATAK default multicast address\nIf no Lat/Long then it drops the marker to a default location",
        "env": []
    },
    {
        "id": "9d8f0d08abfc4e12",
        "type": "inject",
        "z": "0833c215ec6eaf50",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "0c728ce4bb4aa5b7"
            ]
        ]
    },
    {
        "id": "0c728ce4bb4aa5b7",
        "type": "http request",
        "z": "0833c215ec6eaf50",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://10.0.0.16:8081/DOA_value.html",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 250,
        "y": 260,
        "wires": [
            [
                "6c3928841fe909d6"
            ]
        ]
    },
    {
        "id": "c60a6c81203c0503",
        "type": "debug",
        "z": "0833c215ec6eaf50",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 360,
        "wires": []
    },
    {
        "id": "6c3928841fe909d6",
        "type": "function",
        "z": "0833c215ec6eaf50",
        "name": "Parse",
        "func": "var rawData = msg.payload.split(','); // Split the raw data by comma\nvar parsedData = {\n    epochTime: parseInt(rawData[0]),\n    maxDOAAngle: parseFloat(rawData[1]),\n    confidenceValue: parseFloat(rawData[2]),\n    rssiPower: parseFloat(rawData[3]),\n    channelFrequency: parseInt(rawData[4]),\n    antennaArray: rawData[5],\n    latency: parseInt(rawData[6]),\n    stationID: rawData[7],\n    latitude: parseFloat(rawData[8]),\n    longitude: parseFloat(rawData[9]),\n    gpsHeading: parseFloat(rawData[10]),\n    compassHeading: parseFloat(rawData[11]),\n    mainHeadingSensor: rawData[12]\n};\n\nmsg.payload = parsedData; // Replace the payload with the parsed data\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 320,
        "wires": [
            [
                "31ca399aa63a9b0b",
                "254904163928f7fe"
            ]
        ]
    },
    {
        "id": "397a96bbb741b39d",
        "type": "xml",
        "z": "0833c215ec6eaf50",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 870,
        "y": 380,
        "wires": [
            [
                "c60a6c81203c0503",
                "c003c3add6c9fdc0"
            ]
        ]
    },
    {
        "id": "254904163928f7fe",
        "type": "function",
        "z": "0833c215ec6eaf50",
        "name": "Marker",
        "func": "// Assuming the parsed data is available in msg.payload\nconst parsedData = msg.payload;\n\n// Extracting necessary variables from parsed data\nconst {\n    epochTime,\n    maxDOAAngle,\n    confidenceValue,\n    rssiPower,\n    channelFrequency,\n    antennaArray,\n    latency,\n    stationID,\n    latitude,\n    longitude,\n    gpsHeading,\n    compassHeading,\n    mainHeadingSensor\n} = parsedData;\n\nconst dtD = new Date(epochTime);\nconst dtD5 = new Date(epochTime + 14400000);\n\n// Default values for latitude and longitude if they are blank\nconst defaultLatitude = 35.15722;\nconst defaultLongitude = -79.41477;\n\n// Use default values if latitude and/or longitude are blank\nconst finalLatitude = latitude !== 0 ? latitude : defaultLatitude;\nconst finalLongitude = longitude !== 0 ? longitude : defaultLongitude;\n\n// Creating a string with selected variables for the \"remarks\" field\nconst selectedVariables = {\n    maxDOAAngle,\n    confidenceValue,\n    rssiPower,\n    antennaArray,\n    latency,\n    stationID,\n    gpsHeading,\n    compassHeading,\n    mainHeadingSensor\n};\n\nconst remarks = Object.entries(selectedVariables)\n    .map(([key, value]) => `${key}: ${JSON.stringify(value)}`)\n    .join(\", \");\n\nconst payload = {\n    event: {\n        $: {\n            version: \"2.0\",\n            type: \"b-m-p-s-m\",\n            uid: `${channelFrequency}`,\n            time: dtD.toISOString(),\n            start: dtD.toISOString(),\n            stale: dtD5.toISOString(),\n            how: \"h-g-i-g-o\"\n        },\n        point: [\n            {\n                $: {\n                    lat: `${finalLatitude}`,\n                    lon: `${finalLongitude}`,\n                    hae: \"9999999.0\",\n                    ce: \"35.0\",\n                    le: \"9999999.0\"\n                }\n            }\n        ],\n        detail: {\n            status: {\n                $: {\n                    readiness: \"true\"\n                }\n            },\n            archive: [{}, {}],\n            link: {\n                $: {\n                    uid: \"80085\",\n                    production_time: dtD.toISOString(),\n                    type: \"a-f-G-U-C\",\n                    parent_callsign: \"CanaryTAK\",\n                    relation: \"p-p\"\n                }\n            },\n            contact: {\n                $: {\n                    callsign: `Kraken Plot`\n                }\n            },\n            remarks: `${remarks}`,\n            color: {\n                $: {\n                    argb: \"-16711681\"\n                }\n            },\n            precisionlocation: {\n                $: {\n                    altsrc: \"Kraken\"\n                }\n            },\n            usericon: {\n                $: {\n                    iconsetpath: `COT_MAPPING_SPOTMAP/b-m-p-s-m/-16711681`\n                }\n            },\n            parsedData: parsedData\n        }\n    }\n};\n\nreturn { payload };\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 540,
        "wires": [
            [
                "397a96bbb741b39d"
            ]
        ]
    },
    {
        "id": "c003c3add6c9fdc0",
        "type": "udp out",
        "z": "0833c215ec6eaf50",
        "name": "Multicast SA",
        "addr": "239.2.3.1",
        "iface": "",
        "port": "6969",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "false",
        "x": 1210,
        "y": 480,
        "wires": []
    },
    {
        "id": "31ca399aa63a9b0b",
        "type": "function",
        "z": "0833c215ec6eaf50",
        "name": "KrakenDOANodePort",
        "func": "// PORTED FROM KRAKEN SDR's PYTHON Version\n// https://github.com/krakenrf/krakensdr_doa/blob/main/_signal_processing/krakenSDR_signal_processor.py#L1289-L1303\nvar R = 6372.795477598;\nvar line_length = 100;\nvar degrees_to_radians = function (degrees) {\n    var pi = Math.PI;\n    return degrees * (pi / 180);\n};\nvar radians_to_degrees = function (radians) {\n    return radians * (180 / Math.PI);\n};\nvar calculateEndLatLng = function (s_lat, s_lng, doa, my_bearing) {\n    var theta = degrees_to_radians(my_bearing + (360 - doa)); // that is the relative angle from you the craken to the target 360 degrees minus doa + your bearing) then calculated to radians\n    var s_lat_in_rad = degrees_to_radians(s_lat); // starting latitude converted to radians)\n    var s_lng_in_rad = degrees_to_radians(s_lng); // starting lng\n    var e_lat_in_rad = Math.asin(Math.sin(s_lat_in_rad) * Math.cos(line_length / R) + Math.cos(s_lat_in_rad) * (Math.sin(line_length / R) * Math.cos(theta)));\n    var e_lng_in_rad = s_lng_in_rad + Math.atan2(Math.sin(theta) * Math.sin(line_length / R) * Math.cos(s_lat_in_rad), Math.cos(line_length / R) - Math.sin(s_lat_in_rad) * Math.sin(e_lat_in_rad));\n    var e_lat = radians_to_degrees(e_lat_in_rad);\n    var e_lng = radians_to_degrees(e_lng_in_rad);\n    return parseFloat(e_lat.toFixed(6)), parseFloat(e_lng.toFixed(6));\n};\n\nvar payload = msg.payload\n\nvar longitude = payload.longitude\nvar latitude = payload.latitude\nvar doa = payload.maxDOAAngle\nvar bearing = payload.compassHeading\n\n// should return lat, long of target\nreturn calculateEndLatLng(latitude, longitude, doa, bearing)\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 600,
        "wires": [
            [
                "4c4f9e4399ed2080"
            ]
        ]
    },
    {
        "id": "4c4f9e4399ed2080",
        "type": "debug",
        "z": "0833c215ec6eaf50",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 740,
        "wires": []
    }
]